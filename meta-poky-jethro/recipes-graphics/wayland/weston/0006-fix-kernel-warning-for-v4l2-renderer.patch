From 2375d2570409390ec3699a86181336f4493eaed8 Mon Sep 17 00:00:00 2001
From: Dmitry Shifrin <dmitry.shifrin@cogentembedded.com>
Date: Mon, 15 Aug 2016 17:45:48 +0300
Subject: [PATCH] fix kernel warning for v4l2 renderer

---
 src/v4l2-renderer-device.h |  2 +-
 src/v4l2-renderer.c        |  8 ++++----
 src/vsp-renderer.c         | 35 ++++++++++++++++++++++++++++++++++-
 3 files changed, 39 insertions(+), 6 deletions(-)

diff --git a/src/v4l2-renderer-device.h b/src/v4l2-renderer-device.h
index f2fe7be..c2c8c27 100644
--- a/src/v4l2-renderer-device.h
+++ b/src/v4l2-renderer-device.h
@@ -30,7 +30,7 @@
 /*
  * Enable gl-fallback feature.
  */
-//#define V4L2_GL_FALLBACK
+#define V4L2_GL_FALLBACK
 
 struct v4l2_renderer_device {
 	struct media_device *media;
diff --git a/src/v4l2-renderer.c b/src/v4l2-renderer.c
index f020377..864039e 100644
--- a/src/v4l2-renderer.c
+++ b/src/v4l2-renderer.c
@@ -177,8 +177,8 @@ v4l2_create_gl_renderer(struct weston_compositor *ec, struct v4l2_renderer *rend
 {
 	EGLint format = GBM_FORMAT_XRGB8888;
 
-	if (gl_renderer->create(ec, renderer->gbm,
-				gl_renderer->opaque_attribs, &format) < 0) {
+	if (gl_renderer->create(ec, renderer->gbm, EGL_PLATFORM_WAYLAND_KHR,
+				gl_renderer->opaque_attribs, &format, 0) < 0) {
 		return -1;
 	}
 	renderer->gl_renderer = ec->renderer;
@@ -216,8 +216,8 @@ v4l2_init_gl_output(struct weston_output *output, struct v4l2_renderer *renderer
 	output->compositor->renderer = renderer->gl_renderer;
 	output->renderer_state = NULL;
 	read_format = output->compositor->read_format;
-	if (gl_renderer->output_create(output, state->gbm_surface,
-				       gl_renderer->opaque_attribs, &format) < 0) {
+	if (gl_renderer->output_create(output, state->gbm_surface, state->gbm_surface,
+				       gl_renderer->opaque_attribs, &format, 0) < 0) {
 		weston_log("%s: failed to create gl renderer output state\n", __func__);
 		gbm_surface_destroy(state->gbm_surface);
 		return -1;
diff --git a/src/vsp-renderer.c b/src/vsp-renderer.c
index 2515302..b715892 100644
--- a/src/vsp-renderer.c
+++ b/src/vsp-renderer.c
@@ -697,6 +697,33 @@ vsp_queue_buffer(int fd, int capture, struct vsp_surface_state *vs)
 	struct v4l2_buffer buf;
 	struct v4l2_plane planes[VIDEO_MAX_PLANES];
 	int i;
+	struct v4l2_format current_fmt;
+	unsigned int stride;
+
+	stride = vs->base.planes[0].stride;
+	if (!stride){
+
+		memset(&current_fmt, 0, sizeof(struct v4l2_format));
+		current_fmt.type = (capture) ? V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE : V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;
+
+		if (ioctl(fd, VIDIOC_G_FMT, &current_fmt) == -1) {
+			weston_log("VIDIOC_G_FMT failed to %d (%s).\n", fd, strerror(errno));
+		}
+
+		DBG("Current video format: %d, %08x(%c%c%c%c) %ux%u (stride %u) field %08u buffer size %u\n",
+		    current_fmt.type,	
+		    current_fmt.fmt.pix_mp.pixelformat,
+		    (current_fmt.fmt.pix_mp.pixelformat >> 24) & 0xff,
+		    (current_fmt.fmt.pix_mp.pixelformat >> 16) & 0xff,
+		    (current_fmt.fmt.pix_mp.pixelformat >>  8) & 0xff,
+		    current_fmt.fmt.pix_mp.pixelformat & 0xff,
+		    current_fmt.fmt.pix_mp.width, current_fmt.fmt.pix_mp.height, current_fmt.fmt.pix_mp.plane_fmt[0].bytesperline,
+		    current_fmt.fmt.pix_mp.field,
+		    current_fmt.fmt.pix_mp.plane_fmt[0].sizeimage);
+
+		stride = current_fmt.fmt.pix_mp.plane_fmt[0].bytesperline;
+	}
+
 
 	memset(&buf, 0, sizeof buf);
 	buf.type = (capture) ? V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE : V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;
@@ -704,9 +731,15 @@ vsp_queue_buffer(int fd, int capture, struct vsp_surface_state *vs)
 	buf.index = 0;
 	buf.m.planes = planes;
 	buf.length = vs->base.num_planes;
+
 	memset(planes, 0, sizeof(planes));
-	for (i = 0; i < vs->base.num_planes; i++)
+	for (i = 0; i < vs->base.num_planes; i++){
 		buf.m.planes[i].m.fd = vs->base.planes[i].dmafd;
+		if (!capture){
+			buf.m.planes[i].bytesused = stride * vs->base.height;
+			buf.m.planes[i].length = buf.m.planes[i].bytesused;
+		}
+	}
 
 	if (ioctl(fd, VIDIOC_QBUF, &buf) == -1) {
 		weston_log("VIDIOC_QBUF failed for dmafd=%d(%d planes) on %d (%s).\n",
-- 
1.9.1


commit fffd0b5e4c860e93edd03da64d02f18c54ebffae
Author: Ray Strode <rstrode@redhat.com>
Date:   Thu May 12 15:52:12 2016 -0400

    wayland: fall back to shm_open if memfd unavailable
    
    Debian stable currently ships with a 3.16 kernel, so
    it doesn't have memfd available.
    
    This commit adds shm_open fall back code for that case
    (for now).
    
    https://bugzilla.gnome.org/show_bug.cgi?id=766341
    
    Conflicts:
    	gdk/wayland/gdkdisplay-wayland.c
    
    Signed-off-by: Takuro Ashie <ashie@homa.ne.jp>

diff --git a/configure.ac b/configure.ac
index 89722cd..59ce951 100644
--- a/configure.ac
+++ b/configure.ac
@@ -794,6 +794,9 @@ LIBS="$LIBS $GLIB_LIBS"
 AC_CHECK_FUNCS(bind_textdomain_codeset)
 LIBS=$gtk_save_LIBS
 
+AC_CHECK_HEADERS(linux/memfd.h,
+                 AC_DEFINE(HAVE_LINUX_MEMFD_H, 1,
+                           [Define to 1 if memfd.h is available]))
 AC_CHECK_HEADERS(sys/mman.h,
                  AC_DEFINE(HAVE_SYS_MMAN_H, 1,
                            [Define to 1 if mman.h is available]))
diff --git a/gdk/wayland/gdkdisplay-wayland.c b/gdk/wayland/gdkdisplay-wayland.c
index 938d47d..c698292 100644
--- a/gdk/wayland/gdkdisplay-wayland.c
+++ b/gdk/wayland/gdkdisplay-wayland.c
@@ -22,7 +22,11 @@
 #include <errno.h>
 #include <unistd.h>
 #include <fcntl.h>
+
+#ifdef HAVE_LINUX_MEMFD_H
 #include <linux/memfd.h>
+#endif
+
 #include <sys/mman.h>
 #include <sys/syscall.h>
 
@@ -958,10 +962,45 @@ create_shm_pool (struct wl_shm  *shm,
                  void          **data_out)
 {
   struct wl_shm_pool *pool;
-  int ret, fd;
+  int fd;
   void *data;
+  static gboolean force_shm_open = FALSE;
+  int ret = -1;
+
+#if !defined (__NR_memfd_create)
+  force_shm_open = TRUE;
+#endif
+
+  do
+    {
+#if defined (__NR_memfd_create)
+      if (!force_shm_open)
+        {
+          ret = syscall (__NR_memfd_create, "gdk-wayland", MFD_CLOEXEC);
+
+          /* fall back to shm_open until debian stops shipping 3.16 kernel
+           * See bug 766341
+           */
+          if (ret < 0 && errno == ENOSYS)
+            force_shm_open = TRUE;
+        }
+#endif
+
+      if (force_shm_open)
+        {
+          char name[NAME_MAX - 1] = "";
+
+          sprintf (name, "/gdk-wayland-%x", g_random_int ());
 
-  ret = syscall (__NR_memfd_create, "gdk-wayland", MFD_CLOEXEC);
+          ret = shm_open (name, O_CREAT | O_EXCL | O_RDWR | O_CLOEXEC, 0600);
+
+          if (ret >= 0)
+            shm_unlink (name);
+          else if (errno == EEXIST)
+            continue;
+        }
+    }
+  while (ret < 0 && errno == EINTR);
 
   if (ret < 0)
     {
